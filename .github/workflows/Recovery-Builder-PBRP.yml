name: Recovery Builder - PBRP

# Credits to:
# https://github.com/that1 for ldcheck and libneeds script
# https://github.com/TeamWin for QCom' Decryption Guide 
# https://github.com/minimal-manifest-twrp for TWRP Manifest
# https://github.com/azwhikaru for Recovery Builder Template
# And all Contributors in every repositories I used

on:
  workflow_dispatch:
    inputs:
      MANIFEST_URL:
        description: 'Manifest'
        required: true
        default: ''
        type: choice
        options:
        - https://github.com/BlissRoms-x86/manifest.git
      DEVICE_TREE:
        description: 'Custom Recovery Tree' # Your already made Device Tree for TWRP
        required: true
        default: 'https://github.com/cd-Crypton/custom_recovery_tree_asus_AI2201.git'
      DEVICE_TREE_BRANCH:
        description: 'Custom Recovery Tree Branch' # Your Device Tree Branch, make sure it's right.
        required: true
        default: 'Android-12'
      DEVICE_PATH:
        description: 'Specify your Device Path' # As is, just like your DEVICE_PATH in your BoardConfig.mk
        required: true
        default: 'device/asus/AI2201'
      DEVICE_NAME:
        description: 'Specify your Device Codename' # As is, just like your PRODUCT_DEVICE in your device tree.
        required: true
        default: 'AI2201'
      MAKEFILE_NAME:
        description: 'Specify your Makefile Name' # Look for twrp_ or omni_codename.mk, just remove the .mk
        required: true
        default: 'twrp_AI2201'
      BUILD_TARGET:
        description: 'Specify your Build Target' # Pick among boot, recovery and vendor_boot
        required: true
        default: 'recovery'
        type: choice
        options:
        - boot
        - recovery
        - vendorboot
      FILE_TO_CHECK:
        description: 'Specify which libs to check' # Use it know what kind of dependencies your missing for decryption.
        required: true
        default: 'system/bin/qseecomd'

permissions:
  contents: write

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-20.04
    steps:
    - name: Check Out
      uses: actions/checkout@v2.5.0
      
    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 12

    - name: Prepare the Environment
      run: |
        sudo apt update
        sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip squashfs-tools python3-mako libssl-dev ninja-build lunzip syslinux syslinux-utils gettext genisoimage gettext bc xorriso xmlstarlet meson glslang-tools git-lfs libncurses5 libelf-dev aapt zstd rdfind nasm rustc python2 dh-python python-is-python3
        sudo apt-get install git-core gnupg flex bison  build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip

    - name: Install OpenJDK
      run: |
        sudo apt-get install openjdk-8-jdk
        
    - name: Install Git-Repo
      run: |
        git config --global advice.detachedHead false
        git clone https://android.googlesource.com/tools/repo -b v2.30 ~/bin
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo

    - name: Initialize Repo
      run: |
        mkdir workspace
        cd workspace
        echo "workdir=$(pwd)" >> $GITHUB_OUTPUT
        git config --global user.name "TheoLuc"
        git config --global user.email "theodoreluchy@gmail.com"
        repo init --depth=1 -u ${{ github.event.inputs.MANIFEST_URL }} -b arcadia-x86 --git-lfs
      id: pwd
        
    - name: Repo Sync
      run: |
        repo sync -f -j4
      working-directory: workspace

    - name: Building Recovery
      run: |
        source build/envsetup.sh
        export ALLOW_MISSING_DEPENDENCIES=true
        lunch 6 && make clean && make -j8
      working-directory: ${{ steps.pwd.outputs.workdir }}
      
    - name: Set Properties # Output will be use in final name of recovery.
      id: props
      run: |
        echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
      
    - name: Renaming into PBRP
      run: |
        cd out/target/product/system.img
        mv vendor_boot.img ${{ github.event.inputs.MANIFEST_BRANCH }}-3.7.0-${{ github.event.inputs.DEVICE_NAME }}-${{ steps.props.outputs.date }}.img
      working-directory: ${{ steps.pwd.outputs.workdir }}
      
    - name: Upload to Release
      uses: ncipollo/release-action@v1.11.1
      with:
        artifacts: workspace/out/target/product/system.img
        name: Unofficial PBRP for ${{ github.event.inputs.DEVICE_NAME }} - Build ${{ steps.props.outputs.date }} / ${{ github.run_id }}
        draft: false
        prerelease: true
        tag: ${{ github.run_id }}-${{ steps.props.outputs.date }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          Device: ${{ github.event.inputs.DEVICE_NAME }}
          Manifest: ${{ github.event.inputs.MANIFEST_URL }} -b ${{ github.event.inputs.MANIFEST_BRANCH }}
          Status: Alpha - Test it Yourself.

    - name: Link of Release
      run: |
        echo "Here is your newly-built Custom Recovery."
        echo "https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ github.run_id }}-${{ steps.props.outputs.date }}"

# LDCheck works not just in qseecomd, you can target a different file, as long as it is existing in target-out folder.
    - name: Run LDCheck
      run: |
        cd workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/recovery/root
        python3 ldcheck -p system/lib64:vendor/lib64 -d ${{ github.event.inputs.FILE_TO_CHECK }}
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
